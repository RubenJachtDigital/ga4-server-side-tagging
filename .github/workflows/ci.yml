name: CI Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.0', '8.1', '8.2']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.json') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-

    - name: Install Composer dependencies
      run: |
        # Remove lock file and install dependencies for current PHP version
        rm -f composer.lock
        composer install --prefer-dist --no-progress

    - name: Run PHP syntax check
      run: composer lint

    - name: Run WordPress-independent tests
      run: composer test

  # Legacy PHP 7.4 support test (minimal dependencies)
  legacy-php:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP 7.4
      uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
        extensions: dom, curl, libxml, mbstring, zip

    - name: Install minimal dependencies for PHP 7.4
      run: |
        composer install --prefer-dist --no-progress --ignore-platform-reqs --no-dev
        composer require --dev "phpunit/phpunit:^9.5" --ignore-platform-reqs

    - name: Run PHP syntax check only
      run: |
        find . -name '*.php' -not -path './vendor/*' -not -path './node_modules/*' -exec php -l {} \;

  security:
    runs-on: ubuntu-latest
    name: Security checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        
    - name: Install Composer dependencies
      run: |
        # Remove lock file and install dependencies for current PHP version
        rm -f composer.lock
        composer install --prefer-dist --no-progress

    - name: Run PHP Mess Detector
      run: composer run-script md
      continue-on-error: true

    - name: Security audit for Composer dependencies
      run: composer audit
      continue-on-error: true

  deployment-test:
    runs-on: ubuntu-latest
    name: Test plugin deployment
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        
    - name: Install Composer dependencies (production only)
      run: |
        # Remove lock file and install dependencies for current PHP version
        rm -f composer.lock
        composer install --prefer-dist --no-progress --no-dev
      
    - name: Test plugin activation
      run: |
        # Simple test to ensure plugin file syntax is valid
        php -l ga4-server-side-tagging.php
        
    - name: Check for required WordPress functions
      run: |
        # Ensure plugin doesn't use development-only functions
        # Allow error_log when wrapped in WP_DEBUG checks or when writing to log files
        if grep -r "var_dump\|print_r" --include="*.php" --exclude-dir=tests --exclude-dir=vendor .; then
          echo "Found debug functions in production code"
          exit 1
        fi
        
        # Check for unwrapped error_log calls using a more sophisticated approach
        # Create temp script to check for unwrapped error_log calls
        cat > check_error_log.php << 'EOF'
        <?php
        $violations = [];
        $allowed_patterns = [
            '$this->log_file', // Writing to log file is ok
            'if (defined(\'WP_DEBUG\') && WP_DEBUG)', // Wrapped in debug check is ok
        ];
        
        function checkFile($file) {
            global $violations, $allowed_patterns;
            $content = file_get_contents($file);
            $lines = explode("\n", $content);
            
            for ($i = 0; $i < count($lines); $i++) {
                if (strpos($lines[$i], 'error_log') !== false) {
                    $isAllowed = false;
                    
                    // Check if this line or nearby lines contain allowed patterns
                    for ($j = max(0, $i-3); $j <= min(count($lines)-1, $i+3); $j++) {
                        foreach ($allowed_patterns as $pattern) {
                            if (strpos($lines[$j], $pattern) !== false) {
                                $isAllowed = true;
                                break 2;
                            }
                        }
                    }
                    
                    if (!$isAllowed) {
                        $violations[] = "$file:" . ($i+1) . ":" . trim($lines[$i]);
                    }
                }
            }
        }
        
        // Scan PHP files
        $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator('.'));
        foreach ($iterator as $file) {
            if ($file->isFile() && 
                $file->getExtension() === 'php' && 
                strpos($file->getPath(), '/vendor/') === false && 
                strpos($file->getPath(), '/tests/') === false &&
                $file->getFilename() !== 'check_error_log.php') {
                checkFile($file->getPathname());
            }
        }
        
        if (!empty($violations)) {
            echo "Found unwrapped error_log calls:\n";
            foreach ($violations as $violation) {
                echo "$violation\n";
            }
            exit(1);
        } else {
            echo "All error_log calls are properly wrapped or legitimate";
        }
        EOF
        
        php check_error_log.php